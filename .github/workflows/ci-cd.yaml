# name: Python application

# on:
#   push:
#     branches:
#     - main
#   pull_request:
#     branches:
#     - main

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0
#     - name: Set up Python 3.7
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.7
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install flake8 pytest
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#     - name: Lint with flake8
#       run: |
#         # stop the build if there are Python syntax errors or undefined names
#         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#     - name: Test with pytest
#       run: |
#         pytest -v
#     # - name: Deploy to Heroku
#     #   env:
#     #     HEROKU_API_TOKEN: ${{ secrets.HEROKU_API_TOKEN }}
#     #     HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
#     #   if: github.ref == 'refs/heads/main' && job.status == 'success'
#     #   run: |
#     #     git remote add heroku https://heroku:$HEROKU_API_TOKEN@git.heroku.com/$HEROKU_APP_NAME.git
#     #     git push heroku HEAD:main -f

name: Mlops
on: 
  push:
    branches:
      - mlops2

jobs:
  build:

    runs-on: self-hosted
#     strategy:
#       max-parallel: 4
#       matrix:
#           python-version: ['2.x', '3.x']

    steps:
    - run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner
    - uses: actions/checkout@v2
#     - name: use Python 3.6
#       uses: actions/setup-python@v2

#       with:
#         python-version: 3.8
    - name: Install Dependencies
      run: |
        source /home/ubuntu/env/bin/activate 
        pip install -r requirements.txt
        # sudo systemctl daemon-reload
        # sudo systemctl restart nginx
        # sudo systemctl restart gunicorn
        # sudo systemctl status gunicorn